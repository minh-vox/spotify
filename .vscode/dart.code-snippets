{
	"Base Page State": {
		"prefix": "bps",
		"body": [
			"import 'package:auto_route/auto_route.dart';",
			"import 'package:flutter/material.dart';",
			"",
			"import '../../${RELATIVE_FILEPATH/^[\\.\\/]*(\\w+).*/$1/}.dart';",
			"",
			"@RoutePage()",
			"class ${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g} extends StatefulWidget {",
			"  const ${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g}({super.key});",
			"",
			"  @override",
			"  State<StatefulWidget> createState() => _${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g}State();",
			"}",
			"",
			"class _${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g}State extends BasePageState<${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g}, ${TM_FILENAME_BASE/(.*)_view/${1:/pascalcase}/g}Bloc> {",
			"  @override",
			"  Widget buildPage(BuildContext context) {",
			"    return ScaffoldWidget(",
			"      appBar: AppBarWidget(),",
			"      body: const Placeholder(),",
		    "    );",
			"  }",
			"}",
			"",
		],
		"description": "Base Page State"
	},
	"Future Use Case": {
		"prefix": "fuc",
		"body": [
		  "import 'package:freezed_annotation/freezed_annotation.dart';",
		  "import 'package:injectable/injectable.dart';",
		  "",
		  "import '../../domain.dart';",
		  "",
		  "part '${TM_FILENAME_BASE}.freezed.dart';",
		  "",
		  "@injectable",
		  "class ${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g} extends BaseUseCase<${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Input, ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Output> {",
		  "  const ${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g}(this._repository);",
		  "",
		  "  final Repository _repository;",
		  "",
		  "  @protected",
		  "  @override",
		  "  Future<${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Output> buildUseCase(${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Input input) async {",
		  "    $2",
		  "",
		  "    return const ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Output();",
		  "  }",
		  "}",
		  "",
		  "@freezed",
		  "class ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Input extends BaseInput with _$${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Input {",
		  "  const factory ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Input() = _${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Input;",
		  "}",
		  "",
		  "@freezed",
		  "class ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Output extends BaseOutput with _$${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Output {",
		  "  const ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Output._();",
		  "",
		  "  const factory ${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Output() = _${TM_FILENAME_BASE/(.*)_use_case/${1:/pascalcase}/g}Output;",
		  "}",
		  ""
		],
		"description": "Future Use Case"
	},
	"Data class": {
		"prefix": "dc",
		"body": [
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '${TM_FILENAME_BASE}.freezed.dart';",
			"part '${TM_FILENAME_BASE}.g.dart';",
			"",
			"@freezed",
			"class ${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g} with _$${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g} {",
  			"  const factory ${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g}({",
			"    $1",
			"  }) = _${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g};",
			"",
  			"  factory ${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g}.fromJson(Map<String, dynamic> json) => _$${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g}FromJson(json);",
			"}",
			"",
		],
		"description": "Data class"
	},
	"Entity class": {
		"prefix": "ec",
		"body": [
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '${TM_FILENAME_BASE}.freezed.dart';",
			"",
			"@freezed",
			"class ${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g} with _$${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g} {",
  			"  const factory ${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g}({",
			"    $1",
			"  }) = _${TM_FILENAME_BASE/(^|_)([^_]*)/${2:/capitalize}/g};",
			"}",
			"",
		],
		"description": "Entity class"
	},
}